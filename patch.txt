commit 8a9ca8bbab8efcc03ebe2ee355d509ff401e6f9a
Author: Jason Wu <chjasonwu@gmail.com>
Date:   Tue May 3 16:57:20 2016 -0700

    feat: add the video swapping

diff --git a/client/containers/UserPage.js b/client/containers/UserPage.js
index 50bec33..43d1ccd 100644
--- a/client/containers/UserPage.js
+++ b/client/containers/UserPage.js
@@ -6,7 +6,7 @@ import { selectUser } from '../actions/users';
 import * as UserActions from '../actions/users';
 import VideoContainer from '../modules/video/containers/VideoContainer';
 
- 
+
 
 class UserPage extends Component {
 
@@ -34,10 +34,9 @@ class UserPage extends Component {
 
 
   renderUserList(users) {
-   console.log('HEREERERE', users)
     return users.map((user) => {
       return (
-        <li 
+        <li
           key={user}
           //onClick={() => this.props.selectUser(user)}
           className="list-group-item">
@@ -104,6 +103,3 @@ function mapDispatchToProps(dispatch) {
 }
 
 export default connect(mapStateToProps, mapDispatchToProps)(UserPage);
-
-
-
diff --git a/client/middleware/users.js b/client/middleware/users.js
index 38f8d83..f279235 100644
--- a/client/middleware/users.js
+++ b/client/middleware/users.js
@@ -15,8 +15,6 @@ export default function(store) {
   let isTyping = false;
   let lastTypingTime;
 
-  console.log('MADE IT YO');
-  console.log(store)
   const socket = io.connect(`${SERVER_URL}`);
 
 
diff --git a/client/modules/video/containers/VideoContainer.jsx b/client/modules/video/containers/VideoContainer.jsx
index d31a631..9aee510 100644
--- a/client/modules/video/containers/VideoContainer.jsx
+++ b/client/modules/video/containers/VideoContainer.jsx
@@ -7,37 +7,33 @@ class VideoContainer extends Component {
 
   constructor(props) {
     super(props);
-
     this.changeSession = this.changeSession.bind(this);
     this.appendIt = this.appendIt.bind(this);
     this.login = this.login.bind(this);
     this.makeCall = this.makeCall.bind(this);
-
+    this.swapVideo = this.swapVideo.bind(this);
   }
 
-  // componentWillMount() {
-  //   console.log('at componentWillMount');
-  //   console.log('this.changeSession', this.changeSession);
-  //   console.log('this.props.videoActions', this.props.videoActions);
-  //   this.login(this.changeSession, this.props.videoActions);
-  // }
-  //
-  // shouldComponentUpdate(nextProps, nextState) {
-  //   console.log('nextProps', nextProps);
-  //   console.log('nextState', nextState);
-  //   // console.log('nextProps session', nextProps.videoSession);
-  //   // console.log('current session', this.props.videoSession);
-  //
-  //   console.log('nextProps user', nextProps.calledUser);
-  //   console.log('current user', this.props.calledUser);
-  //
-  //   return nextProps.calledUser !== this.props.calledUser;
-  // }
-
   appendIt(){
     if(this.props.videoSession){
-     $('#vid-box').append(this.props.videoSession.outerHTML);
+      $('#vid-box').append(this.props.videoSession.outerHTML);
+    }
+  };
+
+  swapVideo() {
+    // TODO swap the video if current session is not the same as the others
+    if (!this.props.videoSession) {
+      return;
     }
+
+    let id = $('#vid-box video').attr('data-number');
+    let newId = this.props.videoSession.getAttribute('data-number');
+
+    // if not the same, just swap it
+    if (newId !== id) {
+      $('#vid-box').empty();
+    }
+    this.appendIt();
   };
 
   login(changeSession, videoActions) {
@@ -74,25 +70,17 @@ class VideoContainer extends Component {
 
   makeCall() {
     console.log('IN MAKE CALL, ', this.props.calledUser);
-      if (!window.phone) alert("Login First!");
-      else {
-        console.log('dialing');
-        phone.dial(this.props.calledUser);
-      }
+    if (!window.phone) alert("Login First!");
+    else {
+      console.log('dialing');
+      phone.dial(this.props.calledUser);
+    }
   }
 
   render() {
-
     console.log('In Render');
-
     this.login(this.changeSession, this.props.videoActions);
 
-    // TODO do not makeCall unless if i told you so
-    if (this.props.calledUser !== null){
-      setTimeout(this.makeCall, 3000);
-
-    }
-
     if (this.props.teacherSelectedUser) {
       let ball = {
         calledUser: this.props.teacherSelectedUser,
@@ -102,7 +90,10 @@ class VideoContainer extends Component {
     }
 
     if (this.props.videoSession !== null){
-      this.appendIt();
+      // TODO swap this video first
+      // this.appendIt();
+      this.swapVideo();
+
       if (this.props.teacherCall) {
         let classVideoPac = {
           speaker: this.props.calledUser,
@@ -117,14 +108,7 @@ class VideoContainer extends Component {
 
     return (
       <div>
-        <div id="vid-box">
-
-        </div>
-        <span className="input-group-btn">
-            <button type="submit" onClick={this.makeCall} className='btn btn-lg'>Start Video</button>
-        </span>
-
-
+        <div id="vid-box"></div>
       </div>
     );
   }
diff --git a/client/modules/video/reducers/reducer_sessions.jsx b/client/modules/video/reducers/reducer_sessions.jsx
index 366246d..46ef18d 100644
--- a/client/modules/video/reducers/reducer_sessions.jsx
+++ b/client/modules/video/reducers/reducer_sessions.jsx
@@ -29,7 +29,6 @@ export default function(state = initState, action) {
   switch(action.type) {
     case USER_CALL_USER:
 
-      console.log('jason: call user');
       return Object.assign({}, state, {
         calledUser: action.payload.calledUser,
         callingUser: action.payload.callingUser,
@@ -51,18 +50,11 @@ export default function(state = initState, action) {
       });
     case GET_USER_VIDEO:
       let username = action.username;
-      console.log('get user video', username);
-
-      var _session = getVideoByUsername(username);
-      console.log('session', _session);
+      var _session = getVideoByUsername(state.videos, username);
 
       return Object.assign({}, state, {
         videoSession: _session
       });
-
-      // TODO select videos from state
-      // TODO update the current session to selected video
-      // TODO return state
     case MAKE_CALL:
       return Object.assign({}, state, {
         makeCall: action.isAllow
diff --git a/client/reducers/user.js b/client/reducers/user.js
index 4daabab..df125ec 100644
--- a/client/reducers/user.js
+++ b/client/reducers/user.js
@@ -5,8 +5,6 @@ import { USER_LEFT_CLASS } from '../constants/ActionTypes';
 
 export default function(state = {users: [], username: ""}, action) {
   
-  console.log('HERE IN ACTIONS: ', action)
-
   let userObj = {};
   userObj.users = [];
 
@@ -39,7 +37,7 @@ export default function(state = {users: [], username: ""}, action) {
     return userObj;
 
 
-  } 
+  }
   //state.username = 'username';
   return state;
-}
\ No newline at end of file
+}
diff --git a/client/views/LoginView.jsx b/client/views/LoginView.jsx
index da754de..98d0816 100644
--- a/client/views/LoginView.jsx
+++ b/client/views/LoginView.jsx
@@ -48,6 +48,15 @@ class LoginView extends Component {
     userActions.userLogin(this.state.term);
   }
 
+
+  makeCall(user) {
+    if (!window.phone) alert("Login First!");
+    else {
+      console.log('dialing muther urker');
+      window.phone.dial(user);
+    }
+  }
+
   videoCallUser(user){
     const videoActions = this.props.videoActions;
 
@@ -57,11 +66,13 @@ class LoginView extends Component {
     };
 
     videoActions.userCallUser(ball);
+
+    // TODO can I make the call here instead to avoid memory leak?
+    this.makeCall(user);
   }
 
 
   renderUserList(users) {
-   console.log('HEREERERE', users)
     return users.map((user) => {
       return (
         <li
